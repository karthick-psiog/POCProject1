//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BusinessObjects
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class POCDBContext : DbContext
    {
        public POCDBContext()
            : base("name=POCDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<EmailLog> EmailLogs { get; set; }
        public virtual DbSet<EventType> EventTypes { get; set; }
        public virtual DbSet<RemoteCustomer> RemoteCustomers { get; set; }
        public virtual DbSet<ServiceArea> ServiceAreas { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<Nullable<int>> spCheckAvailability(string mobile)
        {
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCheckAvailability", mobileParameter);
        }
    
        public virtual ObjectResult<spCheckRemoteAvailability_Result> spCheckRemoteAvailability(string mobile)
        {
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCheckRemoteAvailability_Result>("spCheckRemoteAvailability", mobileParameter);
        }
    
        public virtual ObjectResult<spGetServiceAreas_Result> spGetServiceAreas(string pIN)
        {
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetServiceAreas_Result>("spGetServiceAreas", pINParameter);
        }
    
        public virtual int spInsertCustomer(string encryptedpwd, string mobile, string pIN, Nullable<System.DateTime> dOB, string firstname, string lastname, string address, string city, string state, string country, ObjectParameter userid)
        {
            var encryptedpwdParameter = encryptedpwd != null ?
                new ObjectParameter("encryptedpwd", encryptedpwd) :
                new ObjectParameter("encryptedpwd", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertCustomer", encryptedpwdParameter, mobileParameter, pINParameter, dOBParameter, firstnameParameter, lastnameParameter, addressParameter, cityParameter, stateParameter, countryParameter, userid);
        }
    
        public virtual int spInsertEmailLog(Nullable<int> userid, Nullable<int> eventtypeid, string source, string logmessage, string emailaddress, Nullable<int> emailstatus)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var eventtypeidParameter = eventtypeid.HasValue ?
                new ObjectParameter("eventtypeid", eventtypeid) :
                new ObjectParameter("eventtypeid", typeof(int));
    
            var sourceParameter = source != null ?
                new ObjectParameter("source", source) :
                new ObjectParameter("source", typeof(string));
    
            var logmessageParameter = logmessage != null ?
                new ObjectParameter("logmessage", logmessage) :
                new ObjectParameter("logmessage", typeof(string));
    
            var emailaddressParameter = emailaddress != null ?
                new ObjectParameter("emailaddress", emailaddress) :
                new ObjectParameter("emailaddress", typeof(string));
    
            var emailstatusParameter = emailstatus.HasValue ?
                new ObjectParameter("emailstatus", emailstatus) :
                new ObjectParameter("emailstatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertEmailLog", useridParameter, eventtypeidParameter, sourceParameter, logmessageParameter, emailaddressParameter, emailstatusParameter);
        }
    
        public virtual int spInsertTransLog(Nullable<int> userid, Nullable<int> eventtypeid, string source, string logmessage)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var eventtypeidParameter = eventtypeid.HasValue ?
                new ObjectParameter("eventtypeid", eventtypeid) :
                new ObjectParameter("eventtypeid", typeof(int));
    
            var sourceParameter = source != null ?
                new ObjectParameter("source", source) :
                new ObjectParameter("source", typeof(string));
    
            var logmessageParameter = logmessage != null ?
                new ObjectParameter("logmessage", logmessage) :
                new ObjectParameter("logmessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertTransLog", useridParameter, eventtypeidParameter, sourceParameter, logmessageParameter);
        }
    
        public virtual ObjectResult<ServiceArea> FunGetServiceArea(string pIN)
        {
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ServiceArea>("FunGetServiceArea", pINParameter);
        }
    
        public virtual ObjectResult<ServiceArea> FunGetServiceArea(string pIN, MergeOption mergeOption)
        {
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ServiceArea>("FunGetServiceArea", mergeOption, pINParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> FunInsertCustomer(string encryptedpwd, string mobile, string pIN, Nullable<System.DateTime> dOB, string firstname, string lastname, string address, string city, string state, string country, ObjectParameter userid)
        {
            var encryptedpwdParameter = encryptedpwd != null ?
                new ObjectParameter("encryptedpwd", encryptedpwd) :
                new ObjectParameter("encryptedpwd", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("FunInsertCustomer", encryptedpwdParameter, mobileParameter, pINParameter, dOBParameter, firstnameParameter, lastnameParameter, addressParameter, cityParameter, stateParameter, countryParameter, userid);
        }
    }
}
